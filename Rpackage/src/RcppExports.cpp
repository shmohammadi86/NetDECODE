// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/NetDECODE.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// asssessCoactivity
mat asssessCoactivity(sp_mat& A);
RcppExport SEXP _NetDECODE_asssessCoactivity(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(asssessCoactivity(A));
    return rcpp_result_gen;
END_RCPP
}
// constructKstarNN
mat constructKstarNN(mat& logPvals, double L_C, double pval_threshold);
RcppExport SEXP _NetDECODE_constructKstarNN(SEXP logPvalsSEXP, SEXP L_CSEXP, SEXP pval_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type logPvals(logPvalsSEXP);
    Rcpp::traits::input_parameter< double >::type L_C(L_CSEXP);
    Rcpp::traits::input_parameter< double >::type pval_threshold(pval_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(constructKstarNN(logPvals, L_C, pval_threshold));
    return rcpp_result_gen;
END_RCPP
}
// symmetrizeNetwork
mat symmetrizeNetwork(mat& G);
RcppExport SEXP _NetDECODE_symmetrizeNetwork(SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(symmetrizeNetwork(G));
    return rcpp_result_gen;
END_RCPP
}
// predictActivityScores
mat predictActivityScores(sp_mat& A, IntegerVector rows, IntegerVector columns, mat& G);
RcppExport SEXP _NetDECODE_predictActivityScores(SEXP ASEXP, SEXP rowsSEXP, SEXP columnsSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type columns(columnsSEXP);
    Rcpp::traits::input_parameter< mat& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(predictActivityScores(A, rows, columns, G));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NetDECODE_asssessCoactivity", (DL_FUNC) &_NetDECODE_asssessCoactivity, 1},
    {"_NetDECODE_constructKstarNN", (DL_FUNC) &_NetDECODE_constructKstarNN, 3},
    {"_NetDECODE_symmetrizeNetwork", (DL_FUNC) &_NetDECODE_symmetrizeNetwork, 1},
    {"_NetDECODE_predictActivityScores", (DL_FUNC) &_NetDECODE_predictActivityScores, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_NetDECODE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
