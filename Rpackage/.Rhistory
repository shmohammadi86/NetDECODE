cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals
p.adjust(gene_pvals, method='BY')
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(gene_pvals)
names(gene_pvals)
row.names(X)
row.names(X)(gene_pvals_corr < pval_threshold)
pval_threshold = 0.01
row.names(X)(gene_pvals_corr < pval_threshold)
row.names(X)[gene_pvals_corr < pval_threshold]
pval_threshold = 0.05
row.names(X)[gene_pvals_corr < pval_threshold]
library(NetDECODE)
library('Matrix')
thread_no = 8;
pval_threshold = 0.05
Diff_genes = lapply(sc.experiments.sce.list.qced, function(x) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
Diff_genes
library(NetDECODE)
library('Matrix')
thread_no = 8;
pval_threshold = 0.05
Diff_genes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
Diff_genes
require(viridis, quietly = T)
require(ComplexHeatmap, quietly = T)
library(NetDECODE)
library('Matrix')
thread_no = 8;
pval_threshold = 0.05
UpGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
DownGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "DMSO");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
GeneRows = mapply(function(Ug, Dg) {cbind(Ug, Dg)}, Ug = UpGenes, Dg = DownGenes)
GeneRows = mapply(function(Ug, Dg) {rbind(Ug, Dg)}, Ug = UpGenes, Dg = DownGenes)
UpGenes[[1]]
Ug = UpGenes[[1]]
Dg = DownGenes[[1]]
Dg
Dg = DownGenes[[2]]
Dg
rbind(Ug, Dg)
d(Ug, Dg)
c(Ug, Dg)
dim(rownames(sc.experiments.sce.list.qced[[1]]))
dims(rownames(sc.experiments.sce.list.qced[[1]]))
rownames(sc.experiments.sce.list.qced[[1]])
length(rownames(sc.experiments.sce.list.qced[[1]]))
length(rownames(sc.experiments.sce.list.qced[[3]]))
length(rownames(sc.experiments.sce.list.qced[[4]]))
which(c(Ug, Dg) %in% rownames(sc.experiments.sce.list.qced[[1]]))
match(c(Ug, Dg), rownames(sc.experiments.sce.list.qced[[1]]))
GeneRows = mapply(function(Ug, Dg) {match(c(Ug, Dg), rownames(sc.experiments.sce.list.qced[[1]]))}, Ug = UpGenes, Dg = DownGenes)
GeneRows
pval_threshold = 1e-10
library(NetDECODE)
library('Matrix')
thread_no = 8;
pval_threshold = 1e-10
UpGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
DownGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "DMSO");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
GeneRows = mapply(function(Ug, Dg) {match(c(Ug, Dg), rownames(sc.experiments.sce.list.qced[[1]]))}, Ug = UpGenes, Dg = DownGenes)
sapply(DownGenes, length)
sapply(UpGenes, length)
library(NetDECODE)
library('Matrix')
thread_no = 8;
pval_threshold = 0.05
UpGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
DownGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "DMSO");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
GeneRows = mapply(function(Ug, Dg) {match(c(Ug, Dg), rownames(sc.experiments.sce.list.qced[[1]]))}, Ug = UpGenes, Dg = DownGenes)
sapply(DownGenes, length)
sapply(UpGenes, length)
Reduce(intersect, DownGenes)
Reduce(intersect, DownGenes(2:))
Reduce(intersect, DownGenes[2:])
DownGenes[2:]
DownGenes[-1]
Reduce(intersect, DownGenes[-1])
Reduce(intersect, UpGenes[-1])
gene_pvals_corr = p.adjust(gene_pvals, method='none')
library(NetDECODE)
library('Matrix')
thread_no = 8;
pval_threshold = 0.05
UpGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BH')
row.names(X)[gene_pvals_corr < pval_threshold] } )
DownGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "DMSO");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BH')
row.names(X)[gene_pvals_corr < pval_threshold] } )
Reduce(intersect, DownGenes[-1])
Reduce(intersect, UpGenes[-1])
GeneRows = mapply(function(Ug, Dg) {match(c(Ug, Dg), rownames(sc.experiments.sce.list.qced[[1]]))}, Ug = UpGenes, Dg = DownGenes)
Reduce(intersect, UpGenes[-1])
Reduce(intersect, DownGenes[-1])
sharedRows = match(c(sharedUp, sharedDown), rownames(sc.experiments.sce.list.qced[[1]]))
sharedDown = Reduce(intersect, DownGenes[-1])
sharedUp = Reduce(intersect, UpGenes[-1])
sharedRows = match(c(sharedUp, sharedDown), rownames(sc.experiments.sce.list.qced[[1]]))
sharedRows
x = sc.experiments.sce.list.qced[[1]]
name(x)
names(x)
sc.experiments.sce.list.qced
names(sc.experiments.sce.list.qced)
i = 1
pp <- Heatmap(Scale.rows(sc.experiments.sce.list.qced[[i]]), col = inferno(10), show_row_names = F, name=names(sc.experiments.sce.list.qced[[i]]), row_title = "Differential genes")
pp <- Heatmap(Scale.rows(exprs(sc.experiments.sce.list.qced[[i]])), col = inferno(10), show_row_names = F, name=names(sc.experiments.sce.list.qced[[i]]), row_title = "Differential genes")
print(pp)
pp
pp <- Heatmap(Scale.rows(exprs(sc.experiments.sce.list.qced[[i]])), col = inferno(10), show_row_names = F, name=names(sc.experiments.sce.list.qced[[i]]), row_title = "Differential genes")
png("NetDECODE_heatmap.png")
pp
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(SummarizedExperiment, quietly = T)
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(SummarizedExperiment, quietly = T)
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(SummarizedExperiment, quietly = T)
source("https://bioconductor.org/biocLite.R")
biocLite("GenomeInfoDb")
install.packages("RCurl")
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(SummarizedExperiment, quietly = T)
source("https://bioconductor.org/biocLite.R")
biocLite("GenomeInfoDb")
update.packages(ask = FALSE, dependencies = c('Suggests'))
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(SummarizedExperiment, quietly = T)
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(SummarizedExperiment, quietly = T)
source('../library/data_load.R')
source('../library/colors_and_plots.R')
source('../library/utils.R')
if (!file.exists(rdsDir)) dir.create(rdsDir)
setwd('/home/shahin/Dropbox/Projects/SingleCell/TsaiLab/Prefrontal_Cortex/New_analysis/clean/data')
load("AD.sce.RData")
sample_annotations = colData(temp.AD.sce) # cell metadata (use gpath)
write.table(sample_annotations, 'sample_annotations_full.txt', quote=F, sep='\t')
for(i in 1:22) {
print(i)
}
i  = 1
zz=gzfile(sprintf('chr%d.data.gz', i),'rt')
dat=read.csv(zz,header=F)
setwd('/home/shahin/Dropbox/Projects/SingleCell/frACTIONate/ROSMAP/Bulk/qc/count')
zz=gzfile(sprintf('chr%d.data.gz', i),'rt')
dat=read.csv(zz,header=F)
dat=read.csv(zz,header=F,sep='\t')
zz=gzfile(sprintf('chr%d.data.gz', i),'rt')
dat=read.csv(zz,header=F,sep='\t')
View(dat)
zz=gzfile(sprintf('chr%d.data.gz', i),'rt')
dat=read.csv(zz,header=F,sep='\t')
close(zz)
View(dat)
zz=gzfile(sprintf('chr%d.info.gz', i),'rt')
dat=read.csv(zz,header=F,sep='\t')
close(zz)
View(dat)
source('~/Dropbox/Projects/SingleCell/frACTIONate/ROSMAP/Bulk/qc/process.R')
source('~/Dropbox/Projects/SingleCell/frACTIONate/ROSMAP/Bulk/qc/process.R')
zz=gzfile(sprintf('chr%d.info.gz', i),'rt')
dat=read.table(zz,header=F,sep='\t')
source('~/Dropbox/Projects/SingleCell/frACTIONate/ROSMAP/Bulk/qc/process.R')
source('~/Dropbox/Projects/SingleCell/frACTIONate/ROSMAP/Bulk/qc/process.R')
source('~/Dropbox/Projects/SingleCell/frACTIONate/ROSMAP/Bulk/qc/process.R')
View(gene_annotations)
View(expression)
dims(expression)
dim(expression)
View(gene_annotations)
zz=gzfile('../phenotypes.txt.gz','rt')
sample_annotations =read.csv(zz,header=F,sep='\t')
View(sample_annotations)
sample_annotations =read.csv(zz,header=T,sep='\t')
View(sample_annotations)
sample_annotations =read.table(zz,header=T,sep='\t')
View(sample_annotations)
zz=gzfile('../phenotypes.txt.gz','rt')
sample_annotations =read.table(zz,sep='\t')
View(sample_annotations)
sample_annotations =read.table(zz, header = T, sep='\t')
zz=gzfile('../phenotypes.txt.gz','rt')
sample_annotations =read.table(zz, header = T, sep='\t')
View(sample_annotations)
View(gene_annotations)
colnames(expression) = sample_annotations$projid;
rownames(expression) = gene_annotations[,1]
View(expression)
X = sort(expression[order(rownames(expression)), ])
X = expression[order(rownames(expression)), ]
View(X)
write.table(X, quote = F, sep='\t')
write.table(X, 'expression.txt', quote = F, sep='\t')
write.table(gene_annotations, 'gene_annotations.txt', quote = F, sep='\t', row.names = F, col.names = F)
write.table(sample_annotations, 'sample_annotations.txt', quote = F, sep='\t', row.names = F, col.names = F)
setwd('/home/shahin/Dropbox/Projects/SingleCell/frACTIONate/ROSMAP/Bulk/qc/qnorm')
source('~/Dropbox/Projects/SingleCell/frACTIONate/ROSMAP/Bulk/qc/qnorm/process.R')
source('~/Dropbox/Projects/SingleCell/frACTIONate/ROSMAP/Bulk/qc/qnorm/process.R')
source('~/Dropbox/Projects/SingleCell/frACTIONate/ROSMAP/Bulk/qc/rlog/process.R')
source('~/Dropbox/Projects/SingleCell/frACTIONate/ROSMAP/Bulk/qc/vsn/process.R')
source('~/Dropbox/Projects/SingleCell/frACTIONate/ROSMAP/Bulk/qc/vsn/process.R')
write.table(sample_annotations, 'sample_annotations.txt', quote = F, sep='\t', row.names = F, col.names = T)
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
knitr::opts_chunk$set(dev = c('pdf', 'png'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"))
library(SummarizedExperiment, quietly = T)
source('../library/data_load.R')
source('../library/colors_and_plots.R')
source('../library/utils.R')
if (!file.exists(rdsDir)) dir.create(rdsDir)
sc.experiments.sce.list = readRDS(file="./archive-rdsFiles/sc.experiments.sce.list.qced.rds")
bulk.experiments.list = readRDS(file="./archive-rdsFiles/bulk.experiments.list.rds")
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(Matrix)
tSNE.plots.list <- lapply(names(sc.experiments.sce.list.qced), function(ds_name)
{ writeMM(format(sc.experiments.sce.list.qced[[ds_name]], nsmall=3), sprintf('%s_expression.txt'));}
library(Matrix)
lapply(names(sc.experiments.sce.list.qced), function(ds_name)
{ writeMM(format(sc.experiments.sce.list.qced[[ds_name]], nsmall=3), sprintf('%s_expression.txt'));}
library(Matrix)
lapply(names(sc.experiments.sce.list.qced), function(ds_name)
{ writeMM(format(sc.experiments.sce.list.qced[[ds_name]], nsmall=3), sprintf('%s_expression.txt'), ds_name);})
sc.experiments.sce.list.qced = readRDS(file="./archive-rdsFiles/sc.experiments.sce.list.qced.rds")
library(Matrix)
lapply(names(sc.experiments.sce.list.qced), function(ds_name)
{ writeMM(format(sc.experiments.sce.list.qced[[ds_name]], nsmall=3), sprintf('%s_expression.txt'), ds_name);})
library(Matrix)
lapply(names(sc.experiments.sce.list.qced), function(ds_name)
{ writeMM(format(exprs(sc.experiments.sce.list.qced[[ds_name]]), nsmall=3), sprintf('%s_expression.txt'), ds_name);})
library(Matrix)
library(scater)
lapply(names(sc.experiments.sce.list.qced), function(ds_name)
{ writeMM(format(exprs(sc.experiments.sce.list.qced[[ds_name]]), nsmall=3), sprintf('%s_expression.txt'), ds_name);})
library(Matrix)
library(scater)
lapply(names(sc.experiments.sce.list.qced), function(ds_name)
{ writeMM(format(as.matrix(exprs(sc.experiments.sce.list.qced[[ds_name]]), nsmall=3)), sprintf('%s_expression.txt'), ds_name);})
names(sc.experiments.sce.list.qced)
ds_name = 'Fluid_C1'
X = exprs(sc.experiments.sce.list.qced[[ds_name]];
X = exprs(sc.experiments.sce.list.qced[[ds_name]]);
X = round(1e3*exprs(sc.experiments.sce.list.qced[[ds_name]]))/1e-3;
X[1:10, 1:10]
X = round(1e3*exprs(sc.experiments.sce.list.qced[[ds_name]]))/1e3;
X[1:10, 1:10]
library(Matrix)
library(scater)
lapply(names(sc.experiments.sce.list.qced), function(ds_name)
{ X = round(1e3*exprs(sc.experiments.sce.list.qced[[ds_name]]))/1e3; writeMM(X, sprintf('%s_expression.txt'), ds_name);})
library(Matrix)
lapply(names(sc.experiments.sce.list.qced), function(ds_name)
{ X = round(1e3*exprs(sc.experiments.sce.list.qced[[ds_name]]))/1e3; writeMM(X, sprintf('%s_expression.txt'), ds_name);})
X = as(round(1e3*exprs(sc.experiments.sce.list.qced[[ds_name]]))/1e3, 'sparse')
X = as(round(1e3*exprs(sc.experiments.sce.list.qced[[ds_name]]))/1e3, 'dgCMatrix');
X = as(round(1e3*exprs(sc.experiments.sce.list.qced[[ds_name]]))/1e3, "sparseMatrix");
library(Matrix)
library(scater)
lapply(names(sc.experiments.sce.list.qced), function(ds_name)
{ X = as(round(1e3*exprs(sc.experiments.sce.list.qced[[ds_name]]))/1e3, "sparseMatrix"); writeMM(X, sprintf('%s_expression.txt'), ds_name);})
library(Matrix)
library(scater)
lapply(names(sc.experiments.sce.list.qced), function(ds_name)
{ X = as(round(1e3*exprs(sc.experiments.sce.list.qced[[ds_name]]))/1e3, "sparseMatrix"); writeMM(X, sprintf('%s_expression.txt', ds_name));})
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(SummarizedExperiment, quietly = T)
source('../library/data_load.R')
source('../library/colors_and_plots.R')
source('../library/utils.R')
if (!file.exists(rdsDir)) dir.create(rdsDir)
sc.experiments.sce.list.qced = readRDS(file="./archive-rdsFiles/sc.experiments.sce.list.qced.rds")
Techs = c("Fluid_HT", "ICELL8", "ddSeq", "10X_fresh")
library(NetDECODE)
library(Matrix)
library(scater)
thread_no = 8;
pval_threshold = 0.05
UpGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BH')
row.names(X)[gene_pvals_corr < pval_threshold] } )
DownGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "DMSO");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BH')
row.names(X)[gene_pvals_corr < pval_threshold] } )
sharedDown = Reduce(intersect, DownGenes[Techs])
sharedUp = Reduce(intersect, UpGenes[Techs])
sharedRows = match(c(sharedUp, sharedDown), rownames(sc.experiments.sce.list.qced[[1]]))
# GeneRows = mapply(function(Ug, Dg) {match(c(Ug, Dg), rownames(sc.experiments.sce.list.qced[[1]]))}, Ug = UpGenes, Dg = DownGenes)
bulk.experiments.edgeR.out.raw <- readRDS(file.path(rdsDir, "bulk.experiments.edgeR.out.raw.rds"))
bulk_genes = rownames(bulk.experiments.edgeR.out.raw$TruSeq)
UpGenes_bulk = bulk_genes[bulk.experiments.edgeR.out.raw$TruSeq$logFC > 2 & bulk.experiments.edgeR.out.raw$TruSeq$FDR < 1e-5];
DownGenes_bulk = bulk_genes[bulk.experiments.edgeR.out.raw$TruSeq$logFC < -2 & bulk.experiments.edgeR.out.raw$TruSeq$FDR < 1e-5];
BulkDE_rows = match(c(UpGenes_bulk, DownGenes_bulk), rownames(sc.experiments.sce.list.qced[[1]]))
lapply(Techs, function(ds_name) {pp <-
heatmap(log(1+counts(sc.experiments.sce.list.qced[[i]][BulkDE_rows,])), scale = "none", Rowv = NA, Colv = NA, col = cm.colors(2), main = ds_name)
})
lapply(Techs, function(ds_name) {pp <-
heatmap(log(1+counts(sc.experiments.sce.list.qced[[ds_name]][BulkDE_rows,])), scale = "none", Rowv = NA, Colv = NA, col = cm.colors(2), main = ds_name)})
lapply(Techs, function(ds_name) {pp <-
heatmap(as.matrix(log(1+counts(sc.experiments.sce.list.qced[[ds_name]][BulkDE_rows,]))), scale = "none", Rowv = NA, Colv = NA, col = cm.colors(2), main = ds_name)})
lapply(Techs, function(ds_name) {pp <-
heatmap(as.matrix(log(1+counts(sc.experiments.sce.list.qced[[ds_name]][sharedRows,]))), scale = "none", Rowv = NA, Colv = NA, col = cm.colors(2), main = ds_name)}, pp)
lapply(Techs, function(ds_name) {pp <-
heatmap(as.matrix(log(1+counts(sc.experiments.sce.list.qced[[ds_name]][sharedRows,]))), scale = "none", Rowv = NA, Colv = NA, col = cm.colors(2), main = ds_name)}, pp)
lapply(Techs, function(ds_name) {pp <-
heatmap(as.matrix(log(1+counts(sc.experiments.sce.list.qced[[ds_name]][sharedRows,]))), scale = "none", Rowv = NA, Colv = NA, col = cm.colors(2), main = ds_name)}; pp)
lapply(Techs, function(ds_name) {pp <-
heatmap(as.matrix(log(1+counts(sc.experiments.sce.list.qced[[ds_name]][BulkDE_rows,]))), scale = "none", Rowv = NA, Colv = NA, col = cm.colors(2), main = ds_name)}, pp)
lapply(Techs, function(ds_name) {pp <-
heatmap(as.matrix(log(1+counts(sc.experiments.sce.list.qced[[ds_name]][BulkDE_rows,]))), scale = "none", Rowv = NA, Colv = NA, col = cm.colors(2), main = ds_name)})
lapply(Techs, function(ds_name) {pp <-
heatmap(as.matrix(log(1+counts(sc.experiments.sce.list.qced[[ds_name]][sharedRows,]))), scale = "none", Rowv = NA, Colv = NA, col = cm.colors(2), main = ds_name)})
lapply(Techs, function(i) {pp <- Heatmap(log(1+counts(sc.experiments.sce.list.qced[[i]][BulkDE_rows,])), col = inferno(10), show_row_names = F, name=i, row_title = "Differential genes", cluster_rows = F, cluster_columns = F); pp})
require(viridis, quietly = T)
require(ComplexHeatmap, quietly = T)
lapply(Techs, function(i) {pp <- Heatmap(log(1+counts(sc.experiments.sce.list.qced[[i]][BulkDE_rows,])), col = inferno(10), show_row_names = F, name=i, row_title = "Differential genes", cluster_rows = F, cluster_columns = F); pp})
lapply(Techs, function(i) {pp <- Heatmap(as.matrix(log(1+counts(sc.experiments.sce.list.qced[[i]][BulkDE_rows,]))), col = inferno(10), show_row_names = F, name=i, row_title = "Differential genes", cluster_rows = F, cluster_columns = F); pp})
set.seed(41)
df.team_data$performance <- rnorm(nrow(df.team_data))
#inspect
head(df.team_data)
df.team_data <- expand.grid(teams = c("Team A", "Team B", "Team C", "Team D")
,metrics = c("Metric 1", "Metric 2", "Metric 3", "Metric 4", "Metric 5")
)
# add variable: performance
set.seed(41)
df.team_data$performance <- rnorm(nrow(df.team_data))
#inspect
head(df.team_data)
library(ComplexHeatmap)
library(circlize)
expr = readRDS(paste0(system.file(package = "ComplexHeatmap"), "/extdata/gene_expression.rds"))
mat = as.matrix(expr[, grep("cell", colnames(expr))])
base_mean = rowMeans(mat)
mat_scaled = t(apply(mat, 1, scale))
View(expr)
type = gsub("s\\d+_", "", colnames(mat))
type
ha = HeatmapAnnotation(df = data.frame(type = type))
Heatmap(as.matrix(log(1+counts(sc.experiments.sce.list.qced[[i]][BulkDE_rows,]))), col = inferno(10), show_row_names = F, name=i, row_title = "Differential genes", cluster_rows = F, cluster_columns = F, bottom_annotation=F); pp})
lapply(Techs, function(i) {pp <- Heatmap(as.matrix(log(1+counts(sc.experiments.sce.list.qced[[i]][BulkDE_rows,]))), col = inferno(10), show_row_names = F, name=i, row_title = "Differential genes", cluster_rows = F, cluster_columns = F, bottom_annotation=F); pp})
lapply(Techs, function(i) {pp <- Heatmap(as.matrix(log(1+counts(sc.experiments.sce.list.qced[[i]][BulkDE_rows,]))), col = inferno(10), show_row_names = F, name=i, row_title = "Differential genes", cluster_rows = F, cluster_columns = F, bottom_annotation_height=0); pp})
lapply(Techs, function(i) {pp <- Heatmap(as.matrix(log(1+counts(sc.experiments.sce.list.qced[[i]][BulkDE_rows,]))), col = inferno(10), show_row_names = F, name=i, row_title = "Differential genes", cluster_rows = F, cluster_columns = F, bottom_annotation_height=unit(0, "mm")); pp})
lapply(Techs, function(i) {pp <- Heatmap(as.matrix(log(1+counts(sc.experiments.sce.list.qced[[i]][BulkDE_rows,]))), col = inferno(10), show_row_names = F, name=i, row_title = "Differential genes", cluster_rows = F, cluster_columns = F, show_column_dend=F, bottom_annotation_height=unit(0, "mm")); pp})
setwd('/home/shahin/Dropbox/Projects/SingleCell/repositories/DECODE/Rpackage')
library(Rcpp)
compileAttributes()
compileAttributes()
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=FALSE, message = F)
ds_folder = '../../input/datasets/PBMC_4k_10X'
expr_file = paste(ds_folder, 'expression.txt', sep = '/')
expression = read.table(expr_file, header = T, row.names = NULL)
gene_names = expression[, 1]
expression = expression[, -1]
X = as.matrix(expression)
Sums = colSums(X)
med = median(Sums)
X = med*scale(X, center=FALSE, scale=Sums)
X = log(1 + X)
gene_mask = rowSums(X != 0) >= 10
X = X[gene_mask,]
gene_names = gene_names[gene_mask]
library(Matrix)
X_sparse = as(X, "sparseMatrix")
# saveRDS(X_sparse, "PBMC_expression.RDS")
annotations = read.table('../../input/datasets/PBMC_4k_10X/sample_annotations.txt', sep='\t', header = T)
require(DECODE)
rows = seq(1, dim(X)[1])
cols = which(annotations$Labels == "T")
thread_no = 8
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
sorted_markers = data.frame(genes=gene_names[order(gene_pvals)], pval=sort(gene_pvals))
require(DECODE)
rows = seq(1, dim(X)[1])
cols_CD8 = which(annotations$Full_Labels == "CD8+ Cytotoxic T")
cols_CD4 = which(annotations$Full_Labels == "CD4+/CD45RA+/CD25- Naive T")
thread_no = 8
gene_pvals = AssessFeatures_betweenGroups(X_sparse, rows, cols_CD8, cols_CD4, thread_no);
sorted_markers_CD8_vs_CD4 = data.frame(genes=gene_names[order(gene_pvals)], pval=sort(gene_pvals))
sorted_markers_CD8_vs_CD4[1:20, ]
sorted_markers[1:20, ]
cols = which(annotations$Labels == "T")
write.table(cols, "TCell_cols.txt")
write.table(cols_CD4, "CD4_cols.txt")
write.table(cols_CD8, "CD8_cols.txt")
getwd()
setwd('/home/shahin/Dropbox/Projects/SingleCell/repositories/NetDECODE2/Rpackage')
compileAttributes()
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=FALSE, message = F)
ds_folder = '../../input/datasets/PBMC_4k_10X'
expr_file = paste(ds_folder, 'expression.txt', sep = '/')
expression = read.table(expr_file, header = T, row.names = NULL)
gene_names = expression[, 1]
expression = expression[, -1]
X = as.matrix(expression)
Sums = colSums(X)
med = median(Sums)
X = med*scale(X, center=FALSE, scale=Sums)
X = log(1 + X)
gene_mask = rowSums(X != 0) >= 10
X = X[gene_mask,]
gene_names = gene_names[gene_mask]
library(Matrix)
X_sparse = as(X, "sparseMatrix")
# saveRDS(X_sparse, "PBMC_expression.RDS")
annotations = read.table('../../input/datasets/PBMC_4k_10X/sample_annotations.txt', sep='\t', header = T)
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=FALSE, message = F)
ds_folder = '../../input/datasets/PBMC_4k_10X'
expr_file = paste(ds_folder, 'expression.txt', sep = '/')
expression = read.table(expr_file, header = T, row.names = NULL)
gene_names = expression[, 1]
expression = expression[, -1]
X = as.matrix(expression)
Sums = colSums(X)
med = median(Sums)
X = med*scale(X, center=FALSE, scale=Sums)
X = log(1 + X)
gene_mask = rowSums(X != 0) >= 10
X = X[gene_mask,]
gene_names = gene_names[gene_mask]
library(Matrix)
X_sparse = as(X, "sparseMatrix")
# saveRDS(X_sparse, "PBMC_expression.RDS")
annotations = read.table('../../input/datasets/PBMC_4k_10X/sample_annotations.txt', sep='\t', header = T)
require(NetDECODE)
rows = seq(1, dim(X)[1])
cols = seq(1, dim(X)[2])
Net = NetDECODE(X_sparse, rows, cols, 8);
View(Net)
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=FALSE, message = F)
require(NetDECODE)
rows = seq(1, dim(X)[1])
cols = seq(1, dim(X)[2])
Net = NetDECODE(X_sparse, rows, cols, 8);
View(Net)
